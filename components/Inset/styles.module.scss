@use "sass:meta";
@use "sass:map";
@use "../../lib/style/spacing";
@use "../../lib/style/screens";

@mixin inset($spacing, $squeeze: false, $squish: false, $debug: false) {
  @if $squeeze {
    padding-left: $spacing / 2;
    padding-right: $spacing / 2;
  } @else {
    padding-left: $spacing;
    padding-right: $spacing;
  }

  @if $squish {
    padding-top: $spacing / 2;
    padding-bottom: $spacing / 2;
  } @else {
    padding-top: $spacing;
    padding-bottom: $spacing;
  }

  // hack for contained negative margin (eg. Text)
  @if $spacing == 0px {
    padding-top: 1px;
    padding-bottom: 1px;
  }

  @if $debug {
    box-shadow: inset 0 0 0 $spacing rgba(0, 0, 0, 0.3);
  }
}

@each $spacing-key, $spacing-value in spacing.$spacing {
  @each $squish in true, false {
    @each $squeeze in true, false {
      @each $debug in true, false {
        $className: inset-#{$spacing-key}#{if($squish, "-squish", "")}#{if($squeeze, "-squeeze", "")}#{if(
            $debug,
            "-debug",
            ""
          )};

        .#{$className} {
          @include inset($spacing-value, $squish: $squish, $squeeze: $squeeze, $debug: $debug);
        }

        @include screens.condition-classes($className) {
          @include inset($spacing-value, $squish: $squish, $squeeze: $squeeze, $debug: $debug);
        }
      }
    }
  }
}
